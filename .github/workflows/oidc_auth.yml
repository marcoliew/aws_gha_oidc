name: AWS OIDC Authentication

on:
  push:
    branches: [ dev ]  # or your preferred branch
  
  # Optional: also trigger on pull requests
  pull_request:
    branches: [ dev ]
  workflow_dispatch:   # Adds manual trigger option

permissions:
  id-token: write   # This is required for OIDC
  contents: read    # This is required for actions/checkout

jobs:
  auth-and-test:
    runs-on: ubuntu-latest
    steps:

      # MUST COME FIRST - Provides access to your repo files
      - uses: actions/checkout@v4      
      # 1. Configure AWS Credentials
      - name: Assume AWS Role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-southeast-2

      # 2. Verification Steps
      - name: Verify AWS Access
        run: |
          echo "=== AWS Identity ==="
          aws sts get-caller-identity
          
          echo "=== S3 Buckets ==="
          aws s3 ls

      # 2. Verify script exists with correct format
      - name: Inspect script
        run: |
          echo "=== File Info ==="
          file ./scripts/get.sh
          echo "=== Line Endings ==="
          cat -A ./scripts/get.sh | head -2
          echo "=== Permissions ==="
          stat -c "%a %n" ./scripts/get.sh

      # 3. Force Unix format and permissions
      - name: Normalize script
        run: |
          # dos2unix ./scripts/get.sh  # Convert line endings if needed
          chmod +x ./scripts/get.sh
          # Verify final state
          file ./scripts/get.sh

      # 4. Run with full debugging
      - name: Execute script
        run: |
          echo "=== Environment ==="
          printenv | sort
          echo "=== Script Output ==="
          ./scripts/get.sh

# jobs:
#   # call_reusable:
#   #   uses: marcoliew/reusable_gha_wf/.github/workflows/aws-oidc-auth.yml@main
#   #   secrets:
#   #     aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}
#   auth:
#     uses: marcoliew/reusable_gha_wf/.github/workflows/aws-oidc-auth.yml@main
#     secrets:
#       aws_role_arn: ${{ secrets.AWS_ROLE_ARN }}  # ← Secret passed correctly
#     with: # ← Regular inputs (non-secrets)
#       aws_region: ap-southeast-2 # Optional since default exists


